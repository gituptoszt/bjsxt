package com.entity.qn;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.google.gson.Gson;

@Controller
public class ImgUpload {

	/**
	 * 七牛云 上传
	 * 
	 * @return
	 * @throws IOException
	 * @throws IllegalStateException
	 */
	@RequestMapping("imgUpload.html")
	@ResponseBody
	public void qnUpload(HttpServletRequest request,
			HttpServletResponse response, MultipartFile file,
			@PathVariable String type) {

		Utils utils = new Utils();

		String path = "E:/jxt_imgs/";
		Map<String, String> map = new HashMap<String, String>();
		try {
			String name = upload(file, path);
			utils.setCode("200");
			utils.setMsg("success");
			map.put("src", name);

		} catch (IllegalStateException | IOException e1) {
			utils.setCode("400");
			utils.setMsg("fail");
			e1.printStackTrace();
		}
		utils.setData(map);

		String json = new Gson().toJson(utils);
		try {
			response.setContentType("text/html;charset=UTF-8");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().print(json);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String upload(MultipartFile file, String path)
			throws IllegalStateException, IOException {

		String realName = file.getOriginalFilename();
		String suffixNmae = realName.substring(realName.lastIndexOf("."));
		String newFileName = new Date().getTime() + "." + suffixNmae;
		File file1 = new File(path, newFileName);

		if (!file1.getParentFile().exists()) {
			file1.getParentFile().mkdir();
		}
		if (file1.exists()) {
			file1.delete();
		}
		file1.createNewFile();
		file.transferTo(file1);
		return file1.getName();
	}

}
